AWSTemplateFormatVersion: '2010-09-09'
Description: 'Nextcloud environment (ARM-based, public subnet only)'

Parameters:
  PublicSubnetName:
    Type: String
    Default: 'nextcloud'
  EC2RootVolumeSize:
    Type: Number
    Default: 8
    MinValue: 8
    MaxValue: 100
  EC2InstanceClass:
    Type: String
    Default: 't4g.small'
    AllowedValues:
      - 't4g.micro'
      - 't4g.small'
      - 't4g.medium'
  DBInstanceName:
    Type: String
    Default: 'nextcloud'
    MinLength: 1
    MaxLength: 63
  DBInstanceClass:
    Type: String
    Default: 'db.t4g.micro'
    AllowedValues:
      - 'db.t4g.micro'
      - 'db.t4g.small'
      - 'db.t4g.medium'
  DBEngine:
    Type: String
    Default: 'postgres'
    AllowedValues:
      - 'postgres'
      - 'mysql'
  DBEngineVersion:
    Type: String
    Default: '16.2'
  DBAllocatedStorage:
    Type: Number
    Default: 5
    MinValue: 5
    MaxValue: 100
  MasterUsername:
    Type: String
    Default: 'liamw'
    MinLength: 1
    MaxLength: 16
  MasterPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 41
  VPCName:
    Type: String
    Default: 'nextcloud'
  IGWName:
    Type: String
    Default: 'nextcloud'
  EC2InstanceName:
    Type: String
    Default: 'nextcloud'
  ImageID:
    Type: String
    Default: 'ami-0c85f77ef4c000593'
  AMIRootDeviceName:
    Type: String
    Default: '/dev/xvda'
  KeyName:
    Type: String
    Default: 'nextcloud'
  S3BucketName:
    Type: String
    Default: 'nextcloud-liamw-data-storage'
  RedisInstanceClass:
    Type: String
    Default: 'cache.t4g.micro'
    AllowedValues:
      - 'cache.t4g.micro'
      - 'cache.t4g.small'
      - 'cache.t4g.medium'
  NextCloudVersion:
    Type: String
    Default: '27'
    AllowedValues:
      - '26'
      - '27'
      - 'latest'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref IGWName

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${PublicSubnetName}-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${PublicSubnetName}-2

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH, HTTP, and HTTPS to EC2 instance"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow PostgreSQL traffic from EC2 instance"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow Redis traffic from EC2 instance"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EC2InstanceName
      ImageId: !Ref ImageID
      InstanceType: !Ref EC2InstanceClass
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: !Ref AMIRootDeviceName
          Ebs:
            VolumeSize: !Ref EC2RootVolumeSize
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          dnf update -y
          dnf install docker -y
          systemctl enable docker
          systemctl start docker
          usermod -a -G docker ec2-user
          docker pull --platform linux/arm64 nextcloud:${NextCloudVersion}
          mkdir -p /nextcloud
          mkdir -p /apache
          docker volume create --driver local -o o=bind -o type=none -o device="/apache" apache
          docker run -d \
          --platform linux/arm64 \
          -e POSTGRES_DB="${DBInstanceName}" \
          -e POSTGRES_USER="${MasterUsername}" \
          -e POSTGRES_PASSWORD="${MasterPassword}" \
          -e POSTGRES_HOST="${DBInstance.Endpoint.Address}" \
          -e OBJECTSTORE_S3_BUCKET="${S3Bucket}" \
          -e OBJECTSTORE_S3_REGION="${AWS::Region}" \
          -e OBJECTSTORE_S3_KEY="${BucketUserCredentials}" \
          -e OBJECTSTORE_S3_SECRET="${BucketUserCredentials.SecretAccessKey}" \
          -e REDIS_HOST="${ElastiCacheCluster.RedisEndpoint.Address}" \
          -e REDIS_PORT="${ElastiCacheCluster.RedisEndpoint.Port}" \
          -p 80:80 \
          -p 443:443 \
          --mount src="/nextcloud",target="/var/www/html",type=bind \
          --mount src="apache",target="/etc/apache2",type=volume \
          --restart=always \
          nextcloud:${NextCloudVersion}
          dnf install cronie -y
          systemctl enable crond
          systemctl start crond
          echo "*/5 * * * * docker exec -u www-data \$(docker ps --format \"{{.ID}} {{.Image}}\" | grep \"nextcloud\" | awk '{print \$1}' | head -n 1) php -f /var/www/html/cron.php >/dev/null 2>&1" | crontab -

  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref EC2Instance
      AllocationId: !GetAtt ElasticIP.AllocationId

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBInstanceName
      DBInstanceClass: !Ref DBInstanceClass
      Engine: !Ref DBEngine
      EngineVersion: !Ref DBEngineVersion
      AllocatedStorage: !Ref DBAllocatedStorage
      StorageType: gp2
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      PubliclyAccessible: true

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet Group for RDS Instance"
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: "ElastiCache Subnet Group"
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  ElastiCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: !Ref RedisInstanceClass
      Engine: redis
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      VpcSecurityGroupIds:
        - !Ref RedisSecurityGroup

  S3Bucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketName: !Ref S3BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: true
          ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  BucketUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
      - PolicyName: s3-access
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:*
            Resource: !Sub arn:aws:s3:::${S3Bucket}
          - Effect: Allow
            Action:
            - s3:*
            Resource: !Sub arn:aws:s3:::${S3Bucket}/*
          - Effect: Deny
            Action:
            - s3:DeleteBucket*
            - s3:PutBucketPolicy
            - s3:PutEncryptionConfiguration
            Resource: "*"
          - Effect: Allow
            Action:
            - s3:GetBucketLocation
            Resource: arn:aws:s3:::*

  BucketUserCredentials:
    Type: AWS::IAM::AccessKey
    Properties:
      Serial: 1
      Status: Active
      UserName: !Ref BucketUser

  PublicSubnetNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC

  InboundPublicNACLRule: 
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  OutboundPublicNACLRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  PublicSubnet1NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicSubnetNACL

  PublicSubnet2NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicSubnetNACL

Outputs:
  EC2InstancePublicIP:
    Description: "Public IP of the EC2 Instance"
    Value: !GetAtt EC2Instance.PublicIp
  S3BucketName:
    Description: "S3 Bucket Name"
    Value: !Ref S3Bucket
  DBInstanceEndpoint:
    Description: "Database Endpoint"
    Value: !GetAtt DBInstance.Endpoint.Address
  RedisEndpoint:
    Description: "ElastiCache Redis Endpoint"
    Value: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
